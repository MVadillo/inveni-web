<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('../partials/head') %>
    <title>WebApp Name | Inicio</title>
</head>

<body class="hold-transition sidebar-mini layout-fixed">
  <!-- Site wrapper -->
  <div class="wrapper">

    <!-- Preloader -->
    <div class="preloader flex-column justify-content-center align-items-center">
      <img class="animation__shake" src="./dist/img/logo-grande.png" alt="WebApp Name Logo" height="120" width="auto">
    </div>

    <%- include('../partials/navbar') %>

    <%- include('../partials/sidebar') %>

        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">
          <!-- Content Header (Page header) -->
          <section class="content-header">
            <div class="container-fluid">
              <div class="row mb-2">
                <div class="col-sm-6">
                  <!-- <h1>Inicio</h1> -->
                </div>
              </div>
            </div><!-- /.container-fluid -->
          </section>

          <!-- Main content -->
          <section class="content">
            <div class="container-fluid">
              <div class="row">
                <div class="col-12">
                  <div class="card">
                    <div class="col-12">
                      <div class="card-header border-0">
                        <h3 class="card-title"><i class="fas fa-database"></i> Bases de datos</h3>
                        <div class="card-tools">
                          <button class="btn btn-sm btn-outline-primary" data-target="#addDatabaseModal"
                            data-toggle="modal" data-whatever="clientes" type="button"><i aria-hidden="true"
                              class="fa fa-plus"></i> Agregar una base de datos</button>
                        </div>
                      </div>
                      <div class="card-body table-responsive p-0">
                        <table class="table table-striped table-valign-middle" id="tables_datatable">
                          <thead>
                            <tr>
                              <th>Nombre</th>
                              <th># Registros</th>
                              <th>Tipo</th>
                              <th>Opciones</th>
                            </tr>
                          </thead>
                          <tbody id="tables_datatable_data">
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>



                  <!-- Default box -->
                  <div class="card">
                    <div class="card-header">
                      <h3 class="card-title"><i class="fas fa-file-upload"></i> Cargar datos</h3>
                      <div class="card-tools">
                        <ul class="nav nav-pills ml-auto">
                          <li class="nav-item">

                          </li>
                        </ul>
                      </div>
                    </div>
                    <!-- /.card-header -->
                    <div class="card-body p-10">
                      <div class="row">
                        <div class="col-md-12">
                          <p><strong> Metodo 1: </strong> Carga un archivo directo a la base de datos.</p>
                          <form id="myform" class="form-inline">
                            <input type="hidden" id='dataBaseName' name="databaseName" required>
                            <div class="form-group col-md-2">
                              <label for="combobox_tablas" class="">Base de datos:</label>
                            </div>
                            <div class="form-group col-md-3">
                              <select id="combobox_tablas" class="form-control col-md-12"> </select>
                            </div>
                            <div class="form-group col-md-5">
                              <input onchange="LOAD.READ_URL(this);" class="col-md-12" type="file" name="uploadfile"
                                accept='csv'>
                            </div>
                            <div class="form-group col-md-2">
                              <button class="btn btn-outline-primary btn-block" type="submit" id="btnUploadCsV">
                                Cargar archivo
                              </button>
                            </div>
                          </form>
                        </div>
                      </div>
                      <div class="row">
                        <br><br>
                        <div id="resultadoImportCsv" class="col-md-12 mt-2">

                        </div>
                      </div>
                      <br />
                      <form>
                        <div class="row">
                          <div class="col-md-12">
                            <p><strong> Metodo 2: </strong> Carga un archivo linea por linea.</p>

                            <div class="col-md-4">
                              <div class="form-group row">

                              </div>
                            </div>
                            <div class="col-md-4">
                              <form id="frm_csv">
                                <label class="btn btn-outline-primary" for="fl_csv">
                                  <input id="fl_csv" type="file" style="display:none" />
                                  <span id="sp_fl_csv">Seleccionar archivo</span>
                                </label>
                              </form>
                              </p>
                            </div>
                            <div class="col-md-4">
                              <span id="upload_status"></span>
                            </div>
                          </div>
                        </div>
                        <div class="row">
                          <div class="col-md-12">
                            <div class="progress progress-striped active">
                              <div class="progress-bar" role="progressbar" aria-valuenow="0" aria-valuemin="0"
                                aria-valuemax="100">
                              </div>
                            </div>

                            <table class="table table-striped table-valign-middle" id="upload_details">
                              <thead id="upload_details_titles">
                              </thead>
                              <tbody id="upload_details_data">
                              </tbody>
                            </table>
                          </div>
                        </div>
                      </form>


                    </div>
                    <!-- /.card-body -->
                  </div>
                  <!-- /.card -->


                  <div class="card">
                    <div class="col-12">
                      <div class="card-header border-0">
                        <h3 class="card-title"><i class="fas fa-database"></i> Combinar bases de datos</h3>
                        <div class="card-tools">
                          <!-- <button class="btn btn-sm btn-outline-primary" data-target="#addDatabaseModal" data-toggle="modal" data-whatever="clientes" type="button"><i aria-hidden="true" class="fa fa-plus"></i> Agregar una base de datos</button>  -->
                        </div>
                      </div>

                      <div class="card-body p-10">

                        <form>
                          <div class="row">

                            <div class="col-md-6">
                              <div class="form-group row">
                                <label for="edit_nombre" class="col-sm-4 col-form-label">Bases de datos: </label>
                                <div class="col-sm-8">
                                  <select class="select2" id="cbox_tablas" multiple="multiple"
                                    data-placeholder="Selecciona las bases de datos a combinar" style="width: 100%;">
                                  </select>
                                </div>
                              </div>
                            </div>
                            <div class="col-md-6">
                              <div class="form-group row">
                                <label for="edit_nombre" class="col-sm-2 col-form-label">Nombre:</label>
                                <div class="col-sm-8">
                                  <input id="txt_nombre_vista" oninput="this.value=this.value.replace(/[^a-z-_]/gi,'')"
                                    class="form-control" placeholder="Nombre de la nueva base de datos" required>
                                  <i class="far fa-comment"></i> Solo son aceptados los siguientes caracteres az AZ
                                  <br/>
                                  <i class="far fa-comment"></i> Son permitidos - y _ pero el nombre no debe comenzar y terminar con ellos
                                </div>
                              </div>
                            </div>

                          </div>

                          <div class="row">
                            <label for="edit_nombre" class="col-sm-2 col-form-label">Seleccionar columnas:</label>
                            <div class="col-sm-10">
                              <div class="form-group">
                                <select class="select2" id="cbox_columnas" multiple="multiple"
                                  data-placeholder="Selecciona las columnas" style="width: 100%;">
                                </select>
                                <i class="far fa-comment"></i>Deja en blanco para utilizar todas las columnas
                                <br />
                                <i class="far fa-comment"></i>La columna "nombre" ya esta seleccionada por defecto
                              </div>
                            </div>
                          </div>

                          <div class="row">

                            <div class="col-md-6">
                              <div class="form-group row">
                                <label for="view_estado" class="col-sm-4 col-form-label">Estados: </label>
                                <div class="col-sm-8">
                                  <input id="cbox_estados" class="form-control" placeholder="Estados" required>
                                  <i class="far fa-comment"></i> Estados separados por coma, deja en blanco para
                                  utilizar todos
                                  <br/>
                                  <i class="far fa-comment"></i> Evita poner espacio en blanco entre los estados
                                </div>
                              </div>
                            </div>
                            <div class="col-md-6">
                              <div class="form-group row">
                                <label for="view_estado" class="col-sm-4 col-form-label">Municipios</label>
                                <div class="col-sm-8">
                                  <input id="cbox_municipios" class="form-control" placeholder="Municipios" required>
                                  <i class="far fa-comment"></i>Municipios separados por coma, deja en blanco para
                                  utilizar todos
                                  <br/>
                                  <i class="far fa-comment"></i> Evita poner espacio en blanco entre lod municipios
                                </div>
                              </div>
                            </div>

                          </div>

                          <div class="row">

                            <div class="col-md-12">
                              <div class="form-group row">
                                <label for="view_estado" class="col-sm-2 col-form-label">Tipo: </label>
                                <div class="col-sm-10">
                                  <div class="form-check">
                                    <input class="form-check-input radioTipo" type="radio" name="gender" id="radioTipo1"
                                      value="consulta" checked>
                                    <label class="form-check-label" for="radioTipo1">
                                      Consulta
                                    </label>
                                  </div>
                                  <div class="form-check">
                                    <input class="form-check-input radioTipo" type="radio" name="gender" id="radioTipo2"
                                      value="mercadotecnia">
                                    <label class="form-check-label" for="radioTipo2">
                                      Mercadotecnia
                                    </label>
                                  </div>
                                </div>
                              </div>
                            </div>

                          </div>

                      </div>

                      <div class="row">

                        <div class="col-md-6"></div>
                        <div class="col-md-6">
                          <div class="form-group row">
                            <label for="edit_nombre" class="col-sm-4 col-form-label"></label>
                            <div class="col-sm-8">
                              <button id="btn_crear_tabla_combinada" class="btn btn-outline-primary">
                                <span id="stopwatch">00:00:00</span>
                                <span id="btn_crear_tabla_combinada_txt">Crear base de datos.</span>
                              </button>
                            </div>
                          </div>
                        </div>

                      </div>

                      </form>
                    </div>
                  </div>



                </div>
              </div>
            </div>
        </div>
        </section>
        <!-- /.content -->
  </div>
  <!-- /.content-wrapper -->

  <%- include('../partials/footer') %>

    <!-- Control Sidebar -->
    <aside class="control-sidebar control-sidebar-dark">
      <!-- Control sidebar content goes here -->
    </aside>
    <!-- /.control-sidebar -->
    </div>

    <!-- Modal -->
    <div class="modal fade" id="addDatabaseModal" tabindex="-1" role="dialog" aria-labelledby="addDatabaseModalTitle"
      aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addDatabaseModalTitle">Crear base de datos</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <div class="form-group">
              <!-- TODO: agregar validacion y limpieza de caracteres para no guardar en la base de datos basura -->
              <div class="form-group row">
                <label for="add_db_nombre" class="col-sm-6 col-form-label">Nombre:</label>
                <div class="col-sm-6">
                  <input id="add_db_nombre" oninput="this.value=this.value.replace(/[^a-z]/gi,'')" type="text"
                    class="form-control" placeholder="Nombre" required>
                </div>
              </div>
              <div class="form-group">
                <label for="add_db_columnas">Columnas</label>
                <textarea class="form-control" oninput="this.value=this.value.replace(/[^a-z\s,-_]/gi,'')"
                  id="add_db_columnas" rows="4" disabled>
                </textarea>
                <p> <i class="far fa-comment"></i> Introducir los nombres de columnas separados por comas, sin espacios.
                </p>
                <p> <i class="far fa-comment"></i> Solo son aceptados los siguientes caracteres , - _ az AZ. </p>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Cerrar</button>
            <button type="button" id="btn_create_database" class="btn btn-outline-primary">Guardar cambios</button>
          </div>
        </div>
      </div>
    </div>

    <%- include('../partials/js') %>
      <script type="text/javascript">
        (function (APP) {
          const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3500
          });

          APP.STORE = APP.STORE || {};
          APP.LOAD = APP.LOAD || {};

          APP.LOAD.UPLOAD_CSV = APP.LOAD.UPLOAD_CSV || function (csvArray) {
            $("#uploadRowsDetails").html("");

            var tableName = $("#combobox_tablas").val();
            var ajaxRequests = [];
            $('#upload_details_data').html('');
            $('.progress').show();
            $('.progress-bar').css('width', '0%').attr('aria-valuenow', 0);
            // Comienza en 1 para impedir que se guarde la primera linea del archivo AKA los titulos de las columnas
            var percentValue = 0

            var removeAccents = (str) => {
              return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
            }

            for (var i = 1; i < csvArray.length; i++) {
              ajaxRequests.push(
                $.ajax({
                  method: 'PUT',
                  url: '/api/tables/insert',
                  dataType: 'json',
                  data: {
                    // row: removeAccents(csvArray[i]),
                    row: csvArray[i],
                    tableName: tableName
                  },
                  success: function (data) {
                    //console.log(data.message + ": " + data.row );
                    var valeur = percentValue++ / csvArray.length * 100;
                    $('.progress-bar').css('width', valeur + '%').attr('aria-valuenow', valeur);
                  },
                  error: function (jqXHR, textStatus, error) {
                    console.log(jqXHR)
                    var data = jqXHR.responseJSON;
                    var columnNames = csvArray[0];
                    var trElement = $('<tr></tr>');
                    for (var i = 0; i < columnNames.length; i++) {
                      var dataColumn = $('<td></td>').text(data.row[i]);
                      trElement.append(dataColumn);
                      $('#upload_details').append(trElement);
                    }
                  }
                })
              );
            }
            $.when
              .apply(undefined, ajaxRequests).always(function () {

                $('#tables_datatable').dataTable().fnDestroy();
                APP.LOAD.LOAD_TABLES_LIST();

                $('#sp_fl_csv').parent().removeAttr('disabled');
                $('#sp_fl_csv').text('Seleccionar archivo');
                $('.progress').hide();


                var failed = [];
                for (var i = 0; i < ajaxRequests.length; i++) {
                  var requestStatus = parseInt(ajaxRequests[i].status);
                  if (requestStatus < 200 || requestStatus > 299) {
                    failed.push(ajaxRequests[i].responseText);
                  }
                }
                if (failed.length > 0) {
                  // Si fallan todas de golpe solo ocurre una vez el apply y ocurre antes de se procesen todos los errores......
                  $("#upload_status").html(`
                    <div class="alert alert-danger alert-dismissible">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                        <h5><i class="icon fas fa-ban"></i> ¡Atención!</h5>
                        Algunos registros no se pudieron guardar
                    </div>`)

                  var columnNames = csvArray[0];
                  var columnsDataTable = [];
                  var trElement = $('<tr></tr>');
                  for (var i = 0; i < columnNames.length; i++) {
                    var dataColumn = $('<td></td>').text(columnNames[i]);
                    trElement.append(dataColumn);
                    $('#upload_details_titles').append(trElement);

                    columnsDataTable.push({ data: columnNames[i] })
                  }

                } else {
                  $("#upload_status").html(`
                    <div class="alert alert-success alert-dismissible">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                        <h5><i class="icon fas fa-check"></i> ¡Atención!</h5>
                        Todos los registros se guardaron con éxito.
                    </div>`)
                }
              });
          }

          APP.LOAD.LOAD_TABLES_LIST = APP.LOAD.LOAD_TABLES_LIST || function () {
            $("#combobox_tablas").empty();
            $("#cbox_tablas").empty();
            $.ajax({
              cache: false,
              url: '/api/tables/getAll',
              type: 'GET',
              success: function (data) {
                if (data.message === 'No tables found.') {

                  $("#combobox_tablas").prop('disabled', true);
                  $("#cbox_tablas").prop('disabled', true);
                  $("#btn_crear_tabla_combinada").prop('disabled', true);
                  $("#fl_csv").prop('disabled', true);

                } else {
                  let tables = data.payload;

                  $("#combobox_tablas").prop('disabled', false);
                  $("#cbox_tablas").prop('disabled', false);
                  $("#btn_crear_tabla_combinada").prop('disabled', false);
                  $("#fl_csv").prop('disabled', false);

                  var tablasArray = [];

                  if (tables.length > 0) {
                    $("#combobox_tablas").empty();
                    for (var i = 0; i < tables.length; i++) {
                      if (tables[i].type === "BASE TABLE") { // Es una tabla no una vista
                        $('#combobox_tablas')
                          .append(`<option value="${tables[i]['name']}">${tables[i]['name']}</option>`);

                        // solo permite que se creen combinaciones de tablas que no sean de mercadotecnia o de consulta
                        // porque se repetirian datos y es posible que las columnas no esten homologadas.
                        if (tables[i]['name'].indexOf('_mercadotecnia') === -1 &&
                          tables[i]['name'].indexOf('_consulta') === -1) {
                          tablasArray.push({ id: tables[i]['name'], text: tables[i]['name'] })
                        }
                      }
                    }

                    $("#dataBaseName").val($("#combobox_tablas").val());
                    $("#cbox_tablas").select2({ data: tablasArray })
                  }
                }

                if (data.message === 'No tables found.') {

                  $('#tables_datatable_data').html('');

                  $('#tables_datatable').DataTable({
                    searching: false, paging: false, info: false,
                    "language": {
                      "lengthMenu": "registros por pagina: _MENU_ ",
                      "zeroRecords": "No se encontraron tablas",
                      "info": "Pagina _PAGE_ de _PAGES_",
                      "infoEmpty": "Sin registros",
                      "infoFiltered": "(filtered from _MAX_ total records)",
                      "sSearch": "Buscar",
                      "paginate": {
                        "previous": "Atras",
                        "next": "Siguiente"
                      }
                    },
                  });
                  return;
                }

                var tables = data.payload;
                $('#tables_datatable_data').html('');
                var columnNames = ["name", "conteo", "type", "opciones"];
                for (var i = 0; i < tables.length; i++) {
                  var trElement = $('<tr></tr>');
                  for (var j = 0; j < columnNames.length; j++) {
                    var dataColumn;
                    if (columnNames[j] === 'opciones') {
                      dataColumn = $('<td></td>').text(tables[i]['name']);
                    } else {
                      dataColumn = $('<td></td>').text(tables[i][columnNames[j]]);
                    }
                    trElement.append(dataColumn);
                    $('#tables_datatable').append(trElement);
                  }
                }

                $('#tables_datatable').DataTable({
                  columns: [
                    { data: 'name' },
                    { data: 'conteo' },
                    {
                      data: 'type',
                      render: function (data, type, row, meta) {
                        return row.type == "BASE TABLE" ? "Base de datos" : "Vista"
                      }
                    },
                    {
                      data: null,
                      render: function (data, type, row, meta) {
                        if (row.type === "BASE TABLE") {
                          return `
                            <a class="btn btn-md btn-outline-success btn-sm" href="/web/home/database-detail?tableName=${row.name}">Ver</a>
                            <button type="button" class="btn btn-md btn-outline-dark btn-sm" data-row-nombre="${row.name}" data-row-tipo="truncate">Purgar</button>
                            <button type="button" class="btn btn-md btn-outline-danger btn-sm" data-row-tablet-type="${row.type}" data-row-nombre="${row.name}" data-row-tipo="delete">Eliminar</button>
                          `;
                        } else {
                          return `
                            <a class="btn btn-md btn-outline-success btn-sm" href="/web/home/database-detail?tableName=${row.name}">Ver</a>
                            <button type="button" class="btn btn-md btn-outline-danger btn-sm" data-row-tablet-type="${row.type}" data-row-nombre="${row.name}" data-row-tipo="delete">Eliminar</button>
                          `;
                        }
                      }
                    },
                  ],
                  info: false,
                  pageLength: 10,
                  lengthMenu: [[5, 10, 20, -1], [5, 10, 20, 'Todos']],
                  "language": {
                    "lengthMenu": "registros por pagina: _MENU_ ",
                    "zeroRecords": "No se encontro nada",
                    "info": "Pagina _PAGE_ de _PAGES_",
                    "infoEmpty": "Sin registros",
                    "infoFiltered": "(filtered from _MAX_ total records)",
                    "sSearch": "Buscar",
                    "paginate": {
                      "previous": "Atras",
                      "next": "Siguiente"
                    }
                  }
                });
              },
              error: function (xhr) {
                Toast.fire({
                  icon: 'error',
                  title: 'No se pudo cargar la información'
                });
              },
            });
          };

          APP.LOAD.TABLA_COMBINADA_UI = APP.LOAD.TABLA_COMBINADA_UI || async function () {
            // var columnas = "NOMBRE,DOMICILIO,COLONIA,CP,TELEFONO,COMPANIA,RFC,CURP,FECHA_NACIMIENTO,PLACA,NUM_SERIE,MODELO,MARCA,LINEA,SALARIO,EMPRESA,ANO,GIRO,NUM_PATRON,NUM_AFILIACION,CONYUGUE,ESTADO,MUNICIPIO";
            // Se elimina nombre porque siempre tiene que ir, esa no es una opcion.
            var columnas = "DOMICILIO,COLONIA,CP,TELEFONO,COMPANIA,RFC,CURP,FECHA_NACIMIENTO,PLACA,NUM_SERIE,MODELO,MARCA,LINEA,SALARIO,EMPRESA,ANO,GIRO,NUM_PATRON,NUM_AFILIACION,CONYUGUE,ESTADO,MUNICIPIO";

            var columnasArray = columnas.split(',')
            var select2Data = []

            for (let i = 0; i < columnasArray.length; i++) {
              const columna = columnasArray[i];
              select2Data.push({ id: columna, text: columna })
            }

            $("#cbox_columnas").select2({ data: select2Data })
            $("#stopwatch").hide();
          };

          APP.LOAD.BTN_CREAR_TABLA_COMBINADA = APP.LOAD.BTN_CREAR_TABLA_COMBINADA || function () {
            $("#btn_crear_tabla_combinada").on("click", function (event) {
              event.preventDefault();

              var nombre = $("#txt_nombre_vista").val();
              var tablas = $("#cbox_tablas").val();
              var columnas = $("#cbox_columnas").val();
              var municipios = $("#cbox_municipios").val();
              var estados = $("#cbox_estados").val();

              if (nombre.length === 0) {
                Toast.fire({
                  icon: 'error',
                  title: 'Por favor Introduce el nombre de la nueva base de datos.'
                });
                return;
              }
              if (tablas.length === 0 || tablas.length === 1) {
                Toast.fire({
                  icon: 'error',
                  title: 'Por favor selecciona 2 o mas bases de datos para combinarlas.'
                });
                return;
              }

              /*for (var i = 0; i < tablas.length; i++) {
                const tabla = tablas[i];
                if (tabla.toUpperCase() === nombre.toUpperCase()) {
                  Toast.fire({
                    icon: 'error',
                    title: 'El nombre ya existe, Por favor selecciona un nombre diferente.'
                  });
                  return;
              }*/

              var arrayMunicipios = [];
              var arrayEstados = [];

              // Es necesario ver si solo es un espacio vacio porque 
              // split hace un array [""] con lenght 1 en vez de [] con lenght 0
              if (municipios !== "") {
                arrayMunicipios = municipios.split(',').map(function (item) {
                  return item.trim();
                });
              }

              if (estados !== "") {
                var arrayEstados = estados.split(',').map(function (item) {
                  return item.trim();
                });
              }

              var format = /[ `!@#$%^&*()_+\-=\[\]{};':"\\|.<>\/?~]/;

              if (format.test(arrayEstados)) {
                Toast.fire({
                  icon: 'error',
                  title: 'Caracteres no validos en Estados, favor de verificar.'
                });
                return;
              }

              if (format.test(arrayMunicipios)) {
                Toast.fire({
                  icon: 'error',
                  title: 'Caracteres no validos en Municipios, favor de verificar.'
                });
                return;
              }

              var tipo = $("input[name='gender']:checked").val();

              $("#btn_crear_tabla_combinada_txt").html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creando base de datos</span>');
              $("#btn_crear_tabla_combinada").prop('disabled', true);

              $.ajax({
                cache: false,
                url: '/api/tables/crearTablaCombinada',
                type: 'POST',
                data: {
                  nombre: nombre,
                  tablas: tablas,
                  columnas: columnas,
                  estados: arrayEstados,
                  municipios: arrayMunicipios,
                  tipo: tipo
                },
                timeout: 600000, // sets timeout to 60 minutos,
                beforeSend: function () {
                  $("#stopwatch").show();
                  $("#stopwatch").stopwatch().stopwatch('reset');
                  $("#stopwatch").stopwatch().stopwatch('start');
                },
                success: function (data) {
                  Toast.fire({
                    icon: 'success',
                    title: 'Tabla combinada creada'
                  });

                  $("#stopwatch").hide();
                  $("#stopwatch").stopwatch().stopwatch('stop');

                  $("#btn_crear_tabla_combinada_txt").html("Crear base de datos.");
                  $("#btn_crear_tabla_combinada").prop('disabled', false);

                  $("#txt_nombre_vista").val("");
                  $('#tables_datatable').dataTable().fnDestroy();
                  APP.LOAD.LOAD_TABLES_LIST();
                },
                error: function (jqXHR, textStatus, error) {
                  console.log(jqXHR);
                  console.log(textStatus);
                  console.log(error);
                  Toast.fire({
                    icon: 'error',
                    title: jqXHR.responseJSON.message
                  });

                  $("#stopwatch").hide();
                  $("#stopwatch").stopwatch().stopwatch('stop');

                  $("#btn_crear_tabla_combinada_txt").html("Crear base de datos.");
                  $("#btn_crear_tabla_combinada").prop('disabled', false);

                },
              });
            });
          }

          APP.LOAD.UI = APP.LOAD.UI || function () {
            // Los nombres de las columans no pueden tener espacios al principio (despues de la coma)
            $('#add_db_columnas').text("NOMBRE,DOMICILIO,COLONIA,CP,TELEFONO,COMPANIA,RFC,CURP,FECHA_NACIMIENTO,PLACA,NUM_SERIE,MODELO,MARCA,LINEA,SALARIO,EMPRESA,ANO,GIRO,NUM_PATRON,NUM_AFILIACION,CONYUGUE,ESTADO,MUNICIPIO");
            $('.progress').hide();
            $('.progress-bar').css('width', '0%').attr('aria-valuenow', 0);

            $('#btn_create_database').on('click', function () {

              var nombre = $("#add_db_nombre").val()
              var columnas = $("#add_db_columnas").val()

              $.ajax({
                cache: false,
                url: '/api/tables/create',
                type: 'POST',
                data: {
                  nombreTabla: nombre,
                  nombreColumnas: columnas
                },
                success: function (data) {
                  Toast.fire({
                    icon: 'success',
                    title: 'Base de datos creada'
                  });
                  $('#tables_datatable').dataTable().fnDestroy();
                  APP.LOAD.LOAD_TABLES_LIST();
                  $('#addDatabaseModal').modal('hide');
                },
                error: function (xhr) {
                  Toast.fire({
                    icon: 'error',
                    title: 'No se pudo cargar la información'
                  });
                },
              });
            });

            $('#tables_datatable tbody').on('click', 'td button', function () {
              var tipo = $(this).data("row-tipo");
              var nombre = $(this).data("row-nombre");
              var table_tipe = $(this).data("row-tablet-type"); // VIEW o BASE TABLE
              var ajax_url

              if (tipo === 'truncate') {
                var result = confirm('Quieres purgar: ' + nombre + ' ?');
                ajax_url = `/api/tables/truncate/${nombre}`;
              } else if (tipo === 'delete') {
                var result = confirm('Quieres borrar: ' + nombre + ' ?');
                ajax_url = `/api/tables/delete/${nombre}/${table_tipe}`;
              }

              if (result) {
                $.ajax({
                  type: "DELETE",
                  url: ajax_url,
                  error: function (xhr, status, error) {
                    Toast.fire({
                      icon: 'error',
                      title: xhr.responseJSON.message
                    });
                  },
                  success: function (result) {
                    Toast.fire({
                      icon: 'success',
                      title: result.message
                    });
                    $('#tables_datatable').dataTable().fnDestroy();
                    APP.LOAD.LOAD_TABLES_LIST();
                  }
                });
              }
            });

            $("#li_dbs").addClass("active");

            $('#frm_csv').on('submit', function (evt) {
              evt.preventDefault();
              return false;
            });

            $('label').on('click', function (evt) {
              if ($(this).attr('disabled') == 'disabled') {
                evt.preventDefault();
                return false;
              }
            });

            $('#fl_csv').on('change', function () {
              var filename = $(this).val();
              var tableName = $("#combobox_tablas").val();
              if (confirm(`Cargar el archivo "${filename}" en la base de datos "${tableName}?"`)) {
                $('#sp_fl_csv').parent().attr('disabled', 'disabled');
                $('#sp_fl_csv').text('Cargando...');
                var fileReader = new FileReader();
                fileReader.onerror = function (err) {
                  alert('Error al cargar el archivo. Intente de nuevo despues.');
                  $('#sp_fl_csv').parent().removeAttr('disabled');
                  $('#sp_fl_csv').text('Seleccionar archivo');
                };
                fileReader.onload = function (evt) {
                  var document = normalize(evt.target.result);
                  var jsonObjects = $.csv.toArrays(document);
                  APP.LOAD.UPLOAD_CSV(jsonObjects);
                };
                fileReader.readAsText($('#fl_csv')[0].files[0]);
              }
            });

            // snipet para la limpieza de caracteres extraños Eliminar tildes, eñes y caracteres raros
            var normalize = (function () {
              var from = "ÃÀÁÄÂÈÉËÊÌÍÏÎÒÓÖÔÙÚÜÛãàáäâèéëêìíïîòóöôùúüûÑñÇç",
                to = "AAAAAEEEEIIIIOOOOUUUUaaaaaeeeeiiiioooouuuunncc",
                mapping = {};

              for (var i = 0, j = from.length; i < j; i++)
                mapping[from.charAt(i)] = to.charAt(i);

              return function (str) {
                var ret = [];
                for (var i = 0, j = str.length; i < j; i++) {
                  var c = str.charAt(i);
                  if (mapping.hasOwnProperty(str.charAt(i)))
                    ret.push(mapping[c]);
                  else
                    ret.push(c);
                }
                return ret.join('');
              }
            })();
            $('.select2').select2({ /* closeOnSelect: false */ })
          };

          APP.LOAD.READ_URL = APP.LOAD.READ_URL || function (input) {
            var uploadFile = input.files[0];
            if (!(/\.(csv)$/i).test(uploadFile.name)) {
              Toast.fire({
                icon: 'error',
                title: 'El archivo adjunto no es una csv'
              });
              $('#btnUploadCsV').hide();
            } else {
              $('#btnUploadCsV').show();
            }
          };

          APP.LOAD.UPLOAD_FILE_UI = APP.LOAD.UPLOAD_FILE_UI || function () {
            $('#btnUploadCsV').hide();
            $("#combobox_tablas").on('change', function () {
              $("#dataBaseName").val($(this).val());
            });
          };

          APP.LOAD.UPLOAD_CSV_FORM = APP.LOAD.UPLOAD_CSV_FORM || function () {
            $("#myform").submit(function (e) { // intercepts the submit event
              e.preventDefault(); // avoid to execute the actual submit of the form

              var isDisabled = $('#combobox_tablas').prop('disabled');
              if (isDisabled) {
                Toast.fire({
                    icon: 'error',
                    title: 'No hay una base de datos seleccionada.'
                  });
                return;
              }
              $.ajax({ // make an AJAX request
                type: "POST",
                url: "/api/tables/uploadfile/",
                cache: false,
                contentType: false,
                processData: false,
                data: new FormData(this), // serializes the form's elements
                xhr: function () {
                  var fileXhr = $.ajaxSettings.xhr();
                  if (fileXhr.upload) {
                    fileXhr.upload.addEventListener("progress", function (e) {
                      if (e.lengthComputable) {
                        if (e.loaded == e.total) {
                          $('#btnUploadCsV').html(` <div class="spinner-border spinner-border-sm" role="status"></div> Procesando archivo `);
                        } else {
                          var porcentaje = e.loaded * 100 / e.total
                          $('#btnUploadCsV').html(` Cargando archivo ${porcentaje.toFixed(0)}% `);
                        }
                      }
                    }, false);
                  }
                  return fileXhr;
                },
                beforeSend: function () {
                  $('#btnUploadCsV').html(`<div class="spinner-border spinner-border-sm" role="status"></div> Cargando... `);
                  $("#btnUploadCsV").prop('disabled', true);
                },
                success: function (data) {
                  console.log(data);
                  $("#resultadoImportCsv").html(`<div class="alert alert-success alert-dismissible">
                      <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                      <h5><i class="icon fas fa-check"></i> Exito!</h5>
                      La información se cargo correctamente.
                    </div>`)

                  $("#btnUploadCsV").prop('disabled', false);
                  $('#btnUploadCsV').hide();
                  $('#btnUploadCsV').html(`Cargar archivo`);
                  $('#tables_datatable').dataTable().fnDestroy();
                  APP.LOAD.LOAD_TABLES_LIST();
                },
                error: function (xhr) {
                  console.log(JSON.stringify(xhr));
                  $("#btnUploadCsV").prop('disabled', false);
                  $('#btnUploadCsV').hide();
                  $('#btnUploadCsV').html(`Cargar archivo`);
                  if (typeof xhr.responseJSON.message !== 'undefined' && xhr.responseJSON.message.length > 0) {
                    console.log(xhr.responseJSON.message)
                    $("#resultadoImportCsv").html(`<div class="alert alert-danger alert-dismissible">
                      <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                      <h5><i class="icon fas fa-ban"></i> Error!</h5>
                      ${xhr.responseJSON.message}
                    </div>`);
                  } else {
                    $("#resultadoImportCsv").html(`<div class="alert alert-danger alert-dismissible">
                      <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                      <h5><i class="icon fas fa-ban"></i> Error!</h5>
                      Error de red, favor de verificar.
                    </div>`);
                  }

                },
                complete: function (data) {
                  $("#btnUploadCsV").prop('disabled', false);
                  $('#btnUploadCsV').hide();
                  $('#btnUploadCsV').html(`Cargar archivo`);

                  $('#myform')[0].reset(); // this will reset the form fields
                }
              });
            });
          };

          APP.LOAD.LOAD_TABLES_LIST();
          APP.LOAD.UI();
          APP.LOAD.BTN_CREAR_TABLA_COMBINADA();
          APP.LOAD.TABLA_COMBINADA_UI();
          APP.LOAD.UPLOAD_FILE_UI();
          APP.LOAD.UPLOAD_CSV_FORM();
        })(window);
      </script>
</body>

</html>